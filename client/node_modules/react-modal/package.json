{
  "_args": [
    [
      "react-modal@https://registry.npmjs.org/react-modal/-/react-modal-1.4.0.tgz",
      "/home/nazrul/Development/Projects/social_sharetribe/client"
    ]
  ],
  "_from": "react-modal@>=1.2.1 <2.0.0",
  "_id": "react-modal@1.4.0",
  "_inCache": true,
  "_location": "/react-modal",
  "_phantomChildren": {
    "lodash._baseassign": "3.2.0",
    "lodash._createassigner": "3.1.1",
    "lodash.keys": "3.1.2"
  },
  "_requested": {
    "name": "react-modal",
    "raw": "react-modal@https://registry.npmjs.org/react-modal/-/react-modal-1.4.0.tgz",
    "rawSpec": "https://registry.npmjs.org/react-modal/-/react-modal-1.4.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/react-modal/-/react-modal-1.4.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/@kadira/storybook-core"
  ],
  "_resolved": "https://registry.npmjs.org/react-modal/-/react-modal-1.4.0.tgz",
  "_shasum": "c50cd02bcd3487f4b53177fa6285f1a5ad49c56e",
  "_shrinkwrap": null,
  "_spec": "react-modal@https://registry.npmjs.org/react-modal/-/react-modal-1.4.0.tgz",
  "_where": "/home/nazrul/Development/Projects/social_sharetribe/client",
  "authors": [
    "Ryan Florence"
  ],
  "bugs": {
    "url": "https://github.com/rackt/react-modal/issues"
  },
  "dependencies": {
    "element-class": "^0.2.0",
    "exenv": "1.2.0",
    "lodash.assign": "^3.2.0"
  },
  "description": "Accessible modal dialog component for React.JS",
  "devDependencies": {
    "babel-core": "^6.7.4",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "envify": "^3.4.1",
    "expect": "1.10.0",
    "karma": "^0.13.22",
    "karma-browserify": "^4.2.1",
    "karma-chrome-launcher": "0.2.0",
    "karma-cli": "0.1.0",
    "karma-firefox-launcher": "0.1.6",
    "karma-mocha": "0.2.0",
    "karma-safari-launcher": "^0.1.1",
    "mocha": "2.3.3",
    "react": "^15.0.0",
    "react-addons-test-utils": "^15.0.0",
    "react-dom": "^15.0.0",
    "rf-release": "0.4.0",
    "sinon": "^1.17.3",
    "uglify-js": "2.4.24",
    "webpack": "^1.12.14",
    "webpack-dev-server": "1.11.0"
  },
  "directories": {
    "example": "examples"
  },
  "homepage": "https://github.com/rackt/react-modal",
  "keywords": [
    "react",
    "react-component",
    "modal",
    "dialog"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "name": "react-modal",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0-0"
  },
  "readme": "# react-modal\n\nAccessible modal dialog component for React.JS\n\n## Usage\n\n```xml\n<Modal\n  isOpen={bool}\n  onAfterOpen={afterOpenFn}\n  onRequestClose={requestOpenFn}\n  closeTimeoutMS={n}\n  style={customStyle}\n>\n  <h1>Modal Content</h1>\n  <p>Etc.</p>\n</Modal>\n```\n\n## Styles\nStyles are passed as an object with 2 keys, 'overlay' and 'content' like so\n```js\n{\n  overlay : {\n    position          : 'fixed',\n    top               : 0,\n    left              : 0,\n    right             : 0,\n    bottom            : 0,\n    backgroundColor   : 'rgba(255, 255, 255, 0.75)'\n  },\n  content : {\n    position                   : 'absolute',\n    top                        : '40px',\n    left                       : '40px',\n    right                      : '40px',\n    bottom                     : '40px',\n    border                     : '1px solid #ccc',\n    background                 : '#fff',\n    overflow                   : 'auto',\n    WebkitOverflowScrolling    : 'touch',\n    borderRadius               : '4px',\n    outline                    : 'none',\n    padding                    : '20px'\n\n  }\n}\n```\n\nStyles passed to the modal are merged in with the above defaults and applied to their respective elements.\nAt this time, media queries will need to be handled by the consumer.\n\n### Using CSS Classes\n\nIf you prefer not to use inline styles or are unable to do so in your project,\nyou can pass `className` and `overlayClassName` props to the Modal.  If you do\nthis then none of the default styles will apply and you will have full control\nover styling via CSS.\n\n\n### Overriding styles globally\nThe default styles above are available on `Modal.defaultStyles`. Changes to this\nobject will apply to all instances of the modal.\n\n## Examples\nInside an app:\n\n```js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar Modal = require('react-modal');\n\nvar appElement = document.getElementById('your-app-element');\n\n/*\nBy default the modal is anchored to document.body. All of the following overrides are available.\n\n* element\nModal.setAppElement(appElement);\n\n* query selector - uses the first element found if you pass in a class.\nModal.setAppElement('#your-app-element');\n\n*/\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)'\n  }\n};\n\n\nvar App = React.createClass({\n\n  getInitialState: function() {\n    return { modalIsOpen: false };\n  },\n\n  openModal: function() {\n    this.setState({modalIsOpen: true});\n  },\n\n  afterOpenModal: function() {\n    // references are now sync'd and can be accessed.\n    this.refs.subtitle.style.color = '#f00';\n  },\n\n  closeModal: function() {\n    this.setState({modalIsOpen: false});\n  },\n\n  render: function() {\n    return (\n      <div>\n        <button onClick={this.openModal}>Open Modal</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles} >\n\n          <h2 ref=\"subtitle\">Hello</h2>\n          <button onClick={this.closeModal}>close</button>\n          <div>I am a modal</div>\n          <form>\n            <input />\n            <button>tab navigation</button>\n            <button>stays</button>\n            <button>inside</button>\n            <button>the modal</button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n});\n\nReactDOM.render(<App/>, appElement);\n```\n# Testing\n\nWhen using React Test Utils with this library, here are some things to keep in mind:\n- You need to set isOpen={true} on the modal component for it to render its children.\n- You need to use the `.portal` property, as in `ReactDOM.findDOMNode(renderedModal.portal)` or `TestUtils.scryRenderedDOMComponentsWithClass(Modal.portal, 'my-modal-class')` to acquire a handle to the inner contents of your modal.\n\nBy default the modal is closed when clicking outside of it (the overlay area). If you want to prevent this behavior you can\npass the 'shouldCloseOnOverlayClick' prop with 'false' value.\n```xml\n<Modal\n  isOpen={bool}\n  onAfterOpen={afterOpenFn}\n  onRequestClose={requestCloseFn}\n  closeTimeoutMS={n}\n  shouldCloseOnOverlayClick={false}\n  style={customStyle}>\n\n  <h1>Force Modal</h1>\n  <p>Modal cannot be closed when clicking the overlay area</p>\n  <button onClick={handleCloseFunc}>Close Modal...</button>\n</Modal>\n```\n\n# Demos\n* http://reactjs.github.io/react-modal/\n* http://reactjs.github.io/react-modal/bootstrap\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rackt/react-modal.git"
  },
  "scripts": {
    "start": "scripts/dev-examples",
    "test": "scripts/test --browsers Firefox --single-run"
  },
  "tags": [
    "react",
    "modal",
    "dialog"
  ],
  "version": "1.4.0"
}
