{
  "_args": [
    [
      "rework@https://registry.npmjs.org/rework/-/rework-1.0.1.tgz",
      "/home/nazrul/Development/Projects/social_sharetribe/client"
    ]
  ],
  "_from": "rework@>=1.0.1 <2.0.0",
  "_id": "rework@1.0.1",
  "_inCache": true,
  "_location": "/rework",
  "_phantomChildren": {},
  "_requested": {
    "name": "rework",
    "raw": "rework@https://registry.npmjs.org/rework/-/rework-1.0.1.tgz",
    "rawSpec": "https://registry.npmjs.org/rework/-/rework-1.0.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/rework/-/rework-1.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/resolve-url-loader"
  ],
  "_resolved": "https://registry.npmjs.org/rework/-/rework-1.0.1.tgz",
  "_shasum": "30806a841342b54510aa4110850cd48534144aa7",
  "_shrinkwrap": null,
  "_spec": "rework@https://registry.npmjs.org/rework/-/rework-1.0.1.tgz",
  "_where": "/home/nazrul/Development/Projects/social_sharetribe/client",
  "author": {
    "email": "tj@vision-media.ca",
    "name": "TJ Holowaychuk"
  },
  "bugs": {
    "url": "https://github.com/reworkcss/rework/issues"
  },
  "dependencies": {
    "convert-source-map": "^0.3.3",
    "css": "^2.0.0"
  },
  "description": "Plugin framework for CSS preprocessing",
  "devDependencies": {
    "mocha": "^1.20.1",
    "should": "^4.0.4"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/reworkcss/rework#readme",
  "keywords": [
    "css",
    "manipulation",
    "preprocess",
    "transform",
    "server"
  ],
  "main": "index",
  "name": "rework",
  "optionalDependencies": {},
  "readme": "# rework [![Build Status](https://travis-ci.org/reworkcss/rework.png)](https://travis-ci.org/reworkcss/rework)\n\nCSS manipulations built on [`css`](https://github.com/reworkcss/css), allowing\nyou to automate vendor prefixing, create your own properties, inline images,\nanything you can imagine!\n\nPlease refer to [`css`](https://github.com/reworkcss/css) for AST documentation\nand to report parser/stringifier issues.\n\n## Installation\n\n    $ npm install rework\n\n## Usage\n\n```js\nvar rework = require('rework');\nvar pluginA = require('pluginA');\nvar pluginB = require('pluginB');\n\nrework('body { font-size: 12px; }', { source: 'source.css' })\n  .use(pluginA)\n  .use(pluginB)\n  .toString({ sourcemap: true })\n```\n\n## API\n\n### rework(code, [options])\n\nAccepts a CSS string and returns a new `Rework` instance. The `options` are\npassed directly to `css.parse`.\n\n### Rework#use(fn)\n\nUse the given plugin `fn`. A rework \"plugin\" is simply a function accepting the\nstylesheet root node and the `Rework` instance.\n\n### Rework#toString([options])\n\nReturns the string representation of the manipulated CSS. The `options` are\npassed directly to `css.stringify`.\n\nUnlike `css.stringify`, if you pass `sourcemap: true` a string will still be\nreturned, with the source map inlined. Also use `sourcemapAsObject: true` if\nyou want the `css.stringify` return value.\n\n## Plugins\n\nRework has a rich collection of plugins and mixins. Browse all the [Rework\nplugins](https://www.npmjs.org/search?q=rework) available on npm.\n\nPlugins of particular note:\n\n- [at2x](https://github.com/reworkcss/rework-plugin-at2x/) – serve high resolution images\n- [calc](https://github.com/reworkcss/rework-calc) – resolve simple `calc()` expressions\n- [colors](https://github.com/reworkcss/rework-plugin-colors/) – color helpers like `rgba(#fc0, .5)`\n- [ease](https://github.com/reworkcss/rework-plugin-ease/) – several additional easing functions\n- [extend](https://github.com/reworkcss/rework-inherit/) – `extend: selector` support\n- [function](https://github.com/reworkcss/rework-plugin-function/) – user-defined CSS functions\n- [import](https://github.com/reworkcss/rework-import) – read and inline CSS via `@import`\n- [inline](https://github.com/reworkcss/rework-plugin-inline) – inline assets as data URIs\n- [mixin](https://github.com/reworkcss/rework-plugin-mixin/) – custom property logic with mixins\n- [npm](https://github.com/reworkcss/rework-npm) - inline CSS via `@import` using node's module resolver\n- [references](https://github.com/reworkcss/rework-plugin-references/) – property references like `height: @width`\n- [url](https://github.com/reworkcss/rework-plugin-url/) – rewrite `url()`s with a given function\n- [variables](https://github.com/reworkcss/rework-vars/) – W3C-style variables\n\n## Built with rework\n\n- [styl](https://github.com/visionmedia/styl)\n- [rework-pure-css](https://github.com/ianstormtaylor/rework-pure-css)\n- [rework-suit](https://github.com/suitcss/rework-suit)\n- [resin](https://github.com/topcoat/resin)\n- [Myth](https://github.com/segmentio/myth)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012–2013 TJ Holowaychuk <tj@vision-media.ca>\n\nCopyright (c) 2014 Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/reworkcss/rework.git"
  },
  "scripts": {
    "test": "mocha --require should --reporter spec"
  },
  "version": "1.0.1"
}
