{
  "_args": [
    [
      "postcss-simple-vars@https://registry.npmjs.org/postcss-simple-vars/-/postcss-simple-vars-3.0.0.tgz",
      "/home/nazrul/Development/Projects/social_sharetribe/client"
    ]
  ],
  "_from": "postcss-simple-vars@>=3.0.0 <4.0.0",
  "_id": "postcss-simple-vars@3.0.0",
  "_inCache": true,
  "_location": "/postcss-simple-vars",
  "_phantomChildren": {},
  "_requested": {
    "name": "postcss-simple-vars",
    "raw": "postcss-simple-vars@https://registry.npmjs.org/postcss-simple-vars/-/postcss-simple-vars-3.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/postcss-simple-vars/-/postcss-simple-vars-3.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/postcss-simple-vars/-/postcss-simple-vars-3.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/postcss-mixins"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-simple-vars/-/postcss-simple-vars-3.0.0.tgz",
  "_shasum": "1fa4ccb4b7151d9f0d52fb8ea19a15c1319599d6",
  "_shrinkwrap": null,
  "_spec": "postcss-simple-vars@https://registry.npmjs.org/postcss-simple-vars/-/postcss-simple-vars-3.0.0.tgz",
  "_where": "/home/nazrul/Development/Projects/social_sharetribe/client",
  "author": {
    "email": "andrey@sitnik.ru",
    "name": "Andrey Sitnik"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-simple-vars/issues"
  },
  "dependencies": {
    "postcss": "^5.0.21"
  },
  "description": "PostCSS plugin for Sass-like variables",
  "devDependencies": {
    "ava": "0.15.2",
    "eslint": "2.13.1",
    "eslint-config-postcss": "2.0.2"
  },
  "eslintConfig": {
    "extends": "eslint-config-postcss/es5"
  },
  "homepage": "https://github.com/postcss/postcss-simple-vars#readme",
  "keywords": [
    "postcss",
    "css",
    "postcss-plugin",
    "sass",
    "variables",
    "vars"
  ],
  "license": "MIT",
  "name": "postcss-simple-vars",
  "optionalDependencies": {},
  "readme": "# PostCSS Simple Variables [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS] plugin for Sass-like variables.\n\nYou can use variables inside values, selectors and at-rule’s parameters.\n\n```css\n$dir:    top;\n$blue:   #056ef0;\n$column: 200px;\n\n.menu_link {\n    background: $blue;\n    width: $column;\n}\n.menu {\n    width: calc(4 * $column);\n    margin-$(dir): 10px;\n}\n```\n\n```css\n.menu_link {\n    background: #056ef0;\n    width: 200px;\n}\n.menu {\n    width: calc(4 * 200px);\n    margin-top: 10px;\n}\n```\n\nIf you want be closer to W3C spec,\nyou should use [postcss-custom-properties] and [postcss-at-rules-variables] plugins.\n\nAlso you should look at [postcss-map] for big complicated configs.\n\n[postcss-at-rules-variables]: https://github.com/GitScrum/postcss-at-rules-variables\n[postcss-custom-properties]:  https://github.com/postcss/postcss-custom-properties\n[postcss-map]:                https://github.com/pascalduez/postcss-map\n[PostCSS]:                    https://github.com/postcss/postcss\n[ci-img]:                     https://travis-ci.org/postcss/postcss-simple-vars.svg\n[ci]:                         https://travis-ci.org/postcss/postcss-simple-vars\n\n## Interpolation\n\nThere is special syntax if you want to use variable inside CSS words:\n\n```css\n$prefix: my-company-widget\n\n$prefix { }\n$(prefix)_button { }\n```\n\n## Comments\n\nYou could use variables in comments too (for example, to generate special\n[mdcss] comments). But syntax for comment variables is different to separate\nthem from PreCSS code examples:\n\n```css\n$width: 100px;\n/* $width: <<$(width)>> */\n```\n\ncompiles to:\n\n```css\n/* $width: 100px */\n```\n\n[mdcss]: https://github.com/jonathantneal/mdcss\n\n## Usage\n\n```js\npostcss([ require('postcss-simple-vars') ])\n```\n\nSee [PostCSS] docs for examples for your environment.\n\n## Options\n\nCall plugin function to set options:\n\n```js\n.pipe(postcss([ require('postcss-simple-vars')({ silent: true }) ]))\n```\n\n### `variables`\n\nSet default variables. It is useful to store colors or other constants\nin common file:\n\n```js\n// config/colors.js\n\nmodule.exports = {\n    blue: '#056ef0'\n}\n\n// gulpfile.js\n\nvar colors = require('./config/colors');\nvar vars   = require('postcss-simple-vars')\n\ngulp.task('css', function () {\n     return gulp.src('./src/*.css')\n        .pipe(postcss([ vars({ variables: colors }) ]))\n        .pipe(gulp.dest('./dest'));\n});\n```\n\nYou can set a function returning object, if you want to update default\nvariables in webpack hot reload:\n\n```js\npostcss([\n    vars({\n        variables: function () {\n            return require('./config/colors');\n        }\n    })\n]\n```\n\n### `onVariables`\n\nCallback invoked once all variables in css are known. The callback receives\nan object representing the known variables, including those explicitly-declared\nby the [`variables`](#variables) option.\n\n```js\npostcss([\n    vars({\n        onVariables: function (variables) {\n            console.log('CSS Variables');\n            console.log(JSON.stringify(variables, null, 2));\n        }\n    })\n]\n```\n\n### `unknown`\n\nCallback on unknown variable name. It receives node instanc, variable name\nand PostCSS’ Result object.\n\n```js\npostcss([\n    vars({\n        unknown: function (node, name, result) {\n            node.warn(result, 'Unknown variable ' + name);\n        }\n    })\n]\n```\n\n### `silent`\n\nLeft unknown variables in CSS and do not throw a error. Default is `false`.\n\n### `only`\n\nSet value only for variables from this object.\nOther variables will not be changed. It is useful for PostCSS plugin developers.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-simple-vars.git"
  },
  "scripts": {
    "test": "ava && eslint *.js"
  },
  "version": "3.0.0"
}
